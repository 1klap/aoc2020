#!/usr/bin/env ruby

def is_passport_valid?(passport)
    k = passport.keys
    if k.include?("byr") \
        && k.include?("iyr") \
        && k.include?("eyr") \
        && k.include?("hgt") \
        && k.include?("hcl") \
        && k.include?("ecl") \
        && k.include?("pid")

        byr = passport["byr"].to_i
        return false unless byr >= 1920 && byr <= 2002
        iyr = passport["iyr"].to_i
        return false unless iyr >= 2010 && iyr <= 2020
        eyr = passport["eyr"].to_i
        return false unless eyr >= 2020 && eyr <= 2030
        hgt = passport["hgt"]
        hgt_cm = hgt.scan(/^(\d{3})cm\z/).flatten
        if hgt_cm.count == 1
            hgt_val = hgt_cm[0].to_i
            return false unless hgt_val >= 150 && hgt_val <= 193
        else
            hgt_in = hgt.scan(/^(\d{2})in\z/).flatten
            if hgt_in.count == 1
                hgt_val =  hgt_in[0].to_i
                return false unless hgt_val >= 59 && hgt_val <= 76
            else
                return false
            end
        end
        hcl = passport["hcl"]
        return false unless hcl.match /^#([a-f]|\d){6}\z/
        ecl = passport["ecl"]
        return false unless %w[amb blu brn gry grn hzl oth].include? ecl
        pid = passport["pid"]
        return false unless pid.match /^\d{9}\z/
        true
    end
end

input = File.read "in/data.txt"
entries = input.split("\n\n")

passports = entries.map { |entry|
    partMap = {}
    parts = entry.split /\s+/
    parts.each do |part|
        split = part.split ":"
        partMap[split[0]] = split[1]
    end
    partMap
}
valid_passports = passports.select { |passport| is_passport_valid?(passport)}

puts "Solution: #{valid_passports.count}"